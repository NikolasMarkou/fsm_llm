{
  "name": "reasoning_orchestrator",
  "description": "Orchestrates various reasoning strategies to solve complex problems.",
  "initial_state": "problem_analysis",
  "persona": "You are a reasoning guide helping to solve problems step by step. Be clear, logical, and thorough.",
  "states": {
    "problem_analysis": {
      "id": "problem_analysis",
      "description": "Initial analysis of the problem to determine its nature and components.",
      "purpose": "Analyze the 'problem_statement' from context. Identify its 'problem_type' (e.g., arithmetic, logical, design), its main 'problem_components', and any 'constraints'.",
      "required_context_keys": ["problem_type", "problem_components"],
      "instructions": "Given the 'problem_statement' in the context, break it down. Set 'problem_type', 'problem_components' (as a list or dict), and 'constraints' (if any, as a list or dict) in your `context_update`. If the problem is simple like '1+1', 'problem_components' could be `{'operand1': 1, 'operand2': 1, 'operator': 'addition'}` and 'problem_type' could be 'arithmetic'. Aim to transition to 'strategy_selection' once these are identified.",
      "transitions": [{
        "target_state": "strategy_selection",
        "description": "Problem has been analyzed, and its type, components (and optionally constraints) are identified in the context.",
        "priority": 1,
        "conditions": [
          {
            "description": "'problem_type' and 'problem_components' must be present in the context.",
            "requires_context_keys": ["problem_type", "problem_components"]
          }
        ]
      }]
    },
    "strategy_selection": {
      "id": "strategy_selection",
      "description": "Selection of the most appropriate reasoning strategy.",
      "purpose": "Select the best reasoning strategy based on the problem analysis. Consider if multiple strategies might be needed.",
      "required_context_keys": ["reasoning_strategy", "strategy_rationale"],
      "transitions": [{
        "target_state": "execute_reasoning",
        "description": "Strategy selected and ready to begin reasoning"
      }]
    },
    "execute_reasoning": {
      "id": "execute_reasoning",
      "description": "Execution phase where the selected reasoning strategy is applied.",
      "purpose": "Guide through the selected reasoning process. This is where the main thinking happens.",
      "instructions": "Apply the selected reasoning strategy to work through the problem systematically.",
      "transitions": [{
        "target_state": "synthesize_solution",
        "description": "Reasoning process completed"
      }]
    },
    "synthesize_solution": {
      "id": "synthesize_solution",
      "description": "Synthesizing insights into a proposed solution.",
      "purpose": "Combine all insights and reasoning steps into a coherent solution. Ensure the solution addresses the original problem.",
      "instructions": "Combine insights and reasoning steps. If 'reasoning_type_selected' was 'simple_calculator' and 'proposed_solution' from that step is already a direct numerical answer, use that directly for this state's 'proposed_solution'. Otherwise, formulate a coherent solution sentence and store it in 'proposed_solution'. Also populate 'key_insights'.",
      "required_context_keys": ["proposed_solution", "key_insights"],
      "transitions": [{
        "target_state": "validate_refine",
        "description": "Solution synthesized"
      }]
    },
  "validate_refine": {
    "id": "validate_refine",
    "description": "Validation and refinement of the proposed solution.",
    "purpose": "Review the 'validation_result' and 'solution_confidence' from the context. If the solution is valid, transition to 'final_answer'. If issues were found ('validation_result' is false) and refinement is needed, transition back to 'execute_reasoning'.",
    "required_context_keys": ["validation_result", "solution_confidence"],
    "instructions": "Based on the 'validation_result' and 'solution_confidence' in the current context: if 'validation_result' is true, decide to transition to 'final_answer'. If 'validation_result' is false, decide to transition to 'execute_reasoning' to refine the solution.",
    "transitions": [
      {
        "target_state": "final_answer",
        "description": "Solution is validated and acceptable.",
        "priority": 1,
        "conditions": [
          {
            "description": "The 'validation_result' in context is true OR 'solution_valid' in context is true.",
            "logic": {
              "or": [
                  {"==": [{"var": "validation_result"}, true]},
                  {"==": [{"var": "solution_valid"}, true]}
              ]
            }
          }
        ]
      },
      {
        "target_state": "execute_reasoning",
        "description": "Issues were found in the solution, and it needs refinement.",
        "priority": 2,
        "conditions": [
          {
            "description": "The 'validation_result' in context is false OR 'solution_valid' in context is false.",
             "logic": {
              "or": [
                  {"==": [{"var": "validation_result"}, false]},
                  {"==": [{"var": "solution_valid"}, false]}
              ]
            }
          }
        ]
      }
    ]
  },
    "final_answer": {
      "id": "final_answer",
      "description": "Presentation of the final answer and reasoning trace.",
      "purpose": "Present the final solution with a clear explanation of the reasoning process used. The 'final_solution' should be derived from the 'proposed_solution' and 'validation_result' in the current context.",
      "required_context_keys": ["final_solution", "reasoning_trace"],
      "instructions": "Your task is to construct the 'final_solution'. Review the 'proposed_solution' and 'validation_result' from the current context. If the 'validation_result' confirms the solution, set 'final_solution' to the value of 'proposed_solution'. If 'validation_result' suggests issues or the solution is simple (like an arithmetic answer), 'final_solution' can be the direct answer (e.g., '2' for '1+1'). Also, ensure the 'reasoning_trace' key in context_update contains the existing reasoning trace data from the current context. Generate a user-facing message that presents this final solution.",
      "transitions": []
    }
  }
}